##############################
#######调用函数
####常用函数之int()函数可以将其他数据类型转换为整数
##############################
print (int('123'))
int(12.34)
float('12.34')
str(1.23)
bool(1)
bool('')

n1=255
n2=1000
print(hex(n1),hex(n2))
print('n1 = 255 = %s\nn2 = 1000 = %s'% (hex(n1),hex(n2)))
###############################################################
############定义函数
###############################################################
#在Python中，定义一个函数要使用def语句，
#依次写出函数名、括号、括号中的参数和冒号:
#然后，在缩进块中编写函数体，函数的返回值用return语句返回，
#return语句若无，则意味着无返回值
###############################################
#一个例子如下：
def my_abs(x):
	if(x>0):
		y=x
	else:
		y=-x
	return y
######
#####如果没有return语句，函数执行完毕后也会返回结果，默认返回值为None
#调用函数时，如果参数个数不对，Python解释器会自动检查出来，
#但是如果参数类型不对，Python解释器就无法帮我们检查。
#当传入了不恰当的参数时，内置函数abs会检查出参数错误，
#而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样。
#所以，这个函数定义不够完善。
#####################################################
print(my_abs(3))
print(my_abs(-3))
#######函数要先定义，后使用
####请注意，函数体内部的语句在执行时，
####一旦执行到return时，函数就执行完毕，并将结果返回。
#############################################################

###pass语句在函数中的作用
#############################################################
def nope():
	pass
#####################################
#死循环
#while(True):
#	pass
##########################
#定义一个函数nope()，但函数体部分暂时还没有完成，又不能空着不写内容，
#因此可以用pass来替代占个位置，
#缺少了pass，代码运行就会有语法错误。
##############################################################
##当你在编写一个程序时，执行语句部分思路还没有完成，
#这时你可以用pass语句来占位，也可以当做是一个标记，
#是要过后来完成的代码。
##############################################################
#修改一下my_abs的定义，对参数类型做检查，只允许整数和浮点数类型的参数。
#数据类型检查可以用内置函数isinstance()实现：
def my_abs2(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
###############isinstance()函数
#
a=2
print(isinstance(a,int))

print(isinstance(a,str))
print(isinstance(a,(str,int,list)))    
#是元组中的一个返回 True
#############################################################
#isinstance(object, classinfo)
#参数
#object -- 实例对象。
#classinfo -- 可以是直接或间接类名、基本类型或者有它们组成的元组。
#################################################################

#定义函数，计算一元二次方程的解；
def yiyuanercifangcheng(a,b,c):
	import math
	delta=(b**2-4*a*c)
	if(delta<0):
		print(u'方程无解')
	else:
		x1=(-b+math.sqrt(delta))/(2*a)
		x2=(-b-math.sqrt(delta))/(2*a)
		print(u'方程的两个解分别为%s %s'%(x1, x2))

yiyuanercifangcheng(1,1,1)
yiyuanercifangcheng(2,4,2)


