
#####汉诺塔问题,递归函数
def move(n,a,b,c):
	if(n==1):
		print(a,"--->",c)
	else:
		move(n-1,a,c,b)
		move(1,a,b,c)
		move(n-1,b,a,c)

move(5,'A','B','C')


a=[2,1,5,4,3,6,0]#输入一个数组
a.sort()
print(a)
tuple_1=(max(a),min(a))
print(tuple_1)

##########################################################################################################################################################
##########################################
###定义高阶函数
###一个函数作为参数出现在另一个函数中，这种函数就称之为高阶函数
###即带有函数嵌套的函数即为高阶函数
def add_abs(x,y,f):
	sum=f(x)+f(y)
	return sum
print(add_abs(-1,-5,abs))


#print([str(n) for n in list(range(0,10))])
###range(0,10)生成的是一个对象，不是列表，可以通过list函数来转换为列表

#----------------------------------------------------------------------
###map()函数
#--------------------------------------------------------------------
def f(x):
	return x*x
r=map(f,list(range(0,10)))
print(list(r))
##map()传入的第一个参数是f，即函数对象本身。
#由于结果r是一个Iterator，Iterator是惰性序列，
##惰性是指，你不主动去遍历它，就不会计算其中元素的值。 
##因此通过list()函数让它把整个序列都计算出来并返回一个list。
#-------------------------------------------------------------
#print(list(map(str,range(0,10))))
#将一个序列全部转换为字符串列表
#-------------------------------------------------------------
def f(n):
	char_n=str(n)
	return char_n
print(list(map(f,list(range(0,10)))))
#---------------------------------------------------------
#或者直接写成：
new_r=map(str,list(range(0,100)))
#map生成的新的序列为惰性序列，需要使用list()将其转换为列表
#------------------------------------------------------------
print(new_r)##返回的是内存的地址
a=list(new_r)##在python ide中演示的结果为一个字符串列表，结果正确
print(a)
print(list(new_r))####为什么此处返回的是空的列表
#------------------------------------------------------------

####------------------------------------------------------
#####reduce()函数
#reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，
#这个函数必须接收两个参数:函数f和列表
#reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
#############################################################
from functools import reduce##reduce在引用之前必须导入
#############################################################
def add(x,y):
	return x+y
A=reduce(add,range(1,10,2))#range(1,10,2)等效于[1,3,5,7,9]
print(A)
#####################################################################

###filter函数
#filter()接收一个函数和一个序列。
#filter()把传入的函数依次作用于每个元素，
#然后根据返回值是True还是False决定保留还是丢弃该元素。
####################################################################
def is_odd(n):
	if n%2==1:
		return True
	else:
		return False 
B=list(filter(is_odd,range(1,10)))
print(B)
##########################################################
##把一个序列中的空字符串删除
def del_empty(n):
	if n==''or n==None:####python把0 空字符串''和None均看作false
		return False
	else:
		return True
C=list(filter(del_empty,['A','','B',None,'C']))
print(C)
#############################################################
#######sorted()函数
#sorted()函数也是一个高阶函数，
#它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：
#key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序,此时由于函数体的作用相当于生成一个新的列表，
#比如['Bob','Adam','bart','Lisa','Zara'],然后根据ASCII表，进行排列
###“key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序”
###这句话的意思是，依次将list中的每一个元素传递给函数的形参，然后再函数体中取出列表元素中用于编程的部分
def by_name(t):
	return t[0]
	#return t[0].lower()
def by_score(t):
	return t[1]
L = [('Bob', 75), ('Adam', 92), ('bart', 66), ('Lisa', 88),('Zara',100)]
print(sorted(L,key=by_name))#按照分数，顺序排列(默认顺序)
#默认情况下，对字符串排序，是按照ASCII的大小比较的，比如，由于'Z' < 'b'，结果，大写字母Z会排在小写字母b的前面。
#如果想让想要忽略大小写，可以在by_name()中写成return t[0].lower(),此时全部按照小写字母顺序进行排列
print(sorted(L,key=by_score,reverse=True))###按照分数，逆序排列
##############################################################################

######################################################
######返回函数
def lazy_sum(*args):#### *args将输入的参数自动整合元组，而元组是可迭代的
	def cal_sum():
		ax=0
		for n in args:
			ax=ax+n
		return ax
	return cal_sum#####函数lazy_sum返回的不是数值而是函数

f=lazy_sum(1,2,4,5)###此时f等于cal_sum
######################################################
print(f)
print(f())###比较print(f)和print(f())之间有什么区别
###########################################################
#在这个例子中，我们在函数lazy_sum中又定义了函数cal_sum，并且，内部函数cal_sum可以引用外部函数lazy_sum的参数和局部变量，
#当lazy_sum返回函数cal_sum时，相关参数和变量都保存在返回的函数中，这种程序结构称为"闭包"

#########################################################################
#-------------------------------------------------------------------------------------------------
####lambda()匿名函数
#-------------------------------------------------------------------------------------------------
def build(a, b):
    return lambda x,y: a*x * x + b*y * y###对于lambda()函数，冒号之前为参数，冒号之后为返回值
f=build(1,1)
print(f)
f(1,2)
print(f(1,2))
#####################################################################
##lambda()用于告诫函数filter()
D=list(filter(lambda n:n%2==1,range(1,20)))###filter()函数，条件为真，保留，条件为假，删除
####n%2==1,为判断语句，其结果要么为真，要么为假
print(D)
