###################自然字符串和三引号指示字符串，可以省去大量的转义字符
########################
print('I\'m \"OK\"')
print('''I'm OK''')
print(r'I\'m OK')
print(r"I'm Ok")
#可以看出三引号相对最为好用
##################################
##########给正则表达式用户的注释 一定要用自然字符串处理正则表达式。
###否则会需要使用很多的反斜杠。例如，后向引用符可以写成'\\1'或r'\1'。

######################################################
i=0
while True:
	print('i=',i)
	i=i+1
	if i>5:##if不是循环语句，break跳出单层循环
		print('THE END')
		break
##############################################
for i in range(10):
	for j in range(5):
		print ('j=',j)
		j=j+1
		if(j>3):
			break
	print('THE END')

##############################################################################
#格式化字符串的函数str.format()，此函数可以快速处理各种字符串。
#语法:它通过{}和,来代替%。
s="{} {}".format('hello','world')
print(s)
w="{1},{0},{1}".format('WTF',20)
print(w)
sss='name:{name} age:{age}'.format(age=18,name='chuhao')
print (sss)

################################################################################
#########字符串操作方法
s='Makerbean'
print(s.find("a"))#有多个重复的字符时，返回第一个查到的字符位置,查询不到时，返回-1
print(s.replace('Maker','hacker'))
print(s.lower())
